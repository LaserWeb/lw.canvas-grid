{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///lw.canvas-grid.min.js","webpack:///webpack/bootstrap b3c3e5e57e129fff80c4","webpack:///./canvas-grid.js","webpack:///../~/lw.canvas-filters/dist/lw.canvas-filters.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","_interopRequireDefault","obj","__esModule","default","_classCallCheck","instance","Constructor","TypeError","Object","defineProperty","value","CanvasGrid","undefined","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","protoProps","staticProps","prototype","_lw","_lw2","settings","cellSize","scaleRatio","x","y","filters","assign","size","width","height","cols","rows","file","image","url","canvas","pixels","input","File","loadFromFile","Image","loadFromImage","URL","loadFromURL","trim","Promise","reject","Error","src","resolve","_this","onload","event","then","catch","onerror","_this2","_loadImage","createObjectURL","_this3","_this4","_processImage","Math","round","ceil","line","context","sx","sy","sw","sh","document","createElement","getContext","fillStyle","fillRect","drawImage","push","getImageData","data","parseInt","isNaN","col","row","pixelData","slice","color","r","g","b","a","gray","grid","coords","invertColor","brightness","contrast","gamma","exp","log","grayscale","algorithm","shades","grayscaleAlgorithms","indexOf","max","min","canvasFilters","smoothing","shadesOfGray","imageSmoothingEnabled","mozImageSmoothingEnabled","webkitImageSmoothingEnabled","msImageSmoothingEnabled","oImageSmoothingEnabled","imageData","contrastFactor","brightnessOffset","gammaCorrection","shadesOfGrayFactor","il","putImageData"],"mappings":"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","file":"lw.canvas-grid.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"CanvasGrid\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"CanvasGrid\"] = factory();\n\telse\n\t\troot[\"CanvasGrid\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"CanvasGrid\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"CanvasGrid\"] = factory();\n\telse\n\t\troot[\"CanvasGrid\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1);\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\texports.CanvasGrid = undefined;\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _lw = __webpack_require__(2);\n\t\n\tvar _lw2 = _interopRequireDefault(_lw);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t// CanvasGrid class\n\tvar CanvasGrid = function () {\n\t    // Class constructor...\n\t    function CanvasGrid(settings) {\n\t        _classCallCheck(this, CanvasGrid);\n\t\n\t        // Init properties\n\t        this.cellSize = 1024;\n\t        this.scaleRatio = { x: 1, y: 1 };\n\t        this.filters = {};\n\t\n\t        Object.assign(this, settings || {});\n\t\n\t        if (!this.scaleRatio.x) {\n\t            this.scaleRatio = { x: this.scaleRatio, y: this.scaleRatio };\n\t        }\n\t\n\t        this.size = { width: 0, height: 0, cols: 0, rows: 0 };\n\t        this.file = null;\n\t        this.image = null;\n\t        this.url = null;\n\t        this.canvas = [];\n\t        this.pixels = [];\n\t    }\n\t\n\t    // <input> can be Image, File, URL object or URL string (http://* or data:image/*)\n\t\n\t\n\t    _createClass(CanvasGrid, [{\n\t        key: 'load',\n\t        value: function load(input) {\n\t            // Load File object\n\t            if (input instanceof File) {\n\t                return this.loadFromFile(input);\n\t            }\n\t\n\t            // Load Image object\n\t            if (input instanceof Image) {\n\t                return this.loadFromImage(input);\n\t            }\n\t\n\t            // Load URL object\n\t            if (typeof input === 'string' || input instanceof URL) {\n\t                return this.loadFromURL(input.trim());\n\t            }\n\t\n\t            // Return rejected promise with an Error object\n\t            return Promise.reject(new Error('Unsupported input format.'));\n\t        }\n\t\n\t        // Load image\n\t\n\t    }, {\n\t        key: '_loadImage',\n\t        value: function _loadImage(src, reject, resolve) {\n\t            var _this = this;\n\t\n\t            // Create Image object\n\t            var image = new Image();\n\t\n\t            // Register for load and error events\n\t            image.onload = function (event) {\n\t                _this.loadFromImage(image).then(resolve).catch(reject);\n\t            };\n\t\n\t            image.onerror = function (event) {\n\t                reject(new Error('An error occurred while loading the image : ' + src));\n\t            };\n\t\n\t            // Load the image from File url\n\t            image.src = src;\n\t        }\n\t\n\t        // Load from File object\n\t\n\t    }, {\n\t        key: 'loadFromFile',\n\t        value: function loadFromFile(input) {\n\t            var _this2 = this;\n\t\n\t            return new Promise(function (resolve, reject) {\n\t                // Bad input type\n\t                if (!(input instanceof File)) {\n\t                    reject(new Error('Input param must be a File object.'));\n\t                }\n\t\n\t                // Set input file\n\t                _this2.file = input;\n\t\n\t                // Load image\n\t                _this2._loadImage(URL.createObjectURL(input), reject, resolve);\n\t            });\n\t        }\n\t\n\t        // Load from URL object or string\n\t\n\t    }, {\n\t        key: 'loadFromURL',\n\t        value: function loadFromURL(input) {\n\t            var _this3 = this;\n\t\n\t            return new Promise(function (resolve, reject) {\n\t                // Bad input type\n\t                if (!(input instanceof URL) && typeof input !== 'string') {\n\t                    reject(new Error('Input param must be a URL string or object.'));\n\t                }\n\t\n\t                // Create url object\n\t                var url = input instanceof URL ? input : new URL(input);\n\t\n\t                // Set url\n\t                _this3.url = url;\n\t\n\t                // Load image\n\t                _this3._loadImage(url, reject, resolve);\n\t            });\n\t        }\n\t\n\t        // Load from Image object\n\t\n\t    }, {\n\t        key: 'loadFromImage',\n\t        value: function loadFromImage(input) {\n\t            var _this4 = this;\n\t\n\t            return new Promise(function (resolve, reject) {\n\t                // Bad input type\n\t                if (!(input instanceof Image)) {\n\t                    reject(new Error('Input param must be a Image object.'));\n\t                }\n\t\n\t                // Set input image\n\t                _this4.image = input;\n\t\n\t                // Process image\n\t                _this4._processImage();\n\t\n\t                // Resolve the promise\n\t                resolve(_this4);\n\t            });\n\t        }\n\t    }, {\n\t        key: '_processImage',\n\t        value: function _processImage() {\n\t            // Reset canvas grid\n\t            this.canvas = [];\n\t            this.pixels = [];\n\t\n\t            // Calculate grid size\n\t            var width = Math.round(this.image.width * this.scaleRatio.x);\n\t            var height = Math.round(this.image.height * this.scaleRatio.y);\n\t            var cols = Math.ceil(width / this.cellSize);\n\t            var rows = Math.ceil(height / this.cellSize);\n\t\n\t            this.size = { width: width, height: height, cols: cols, rows: rows };\n\t\n\t            // Create canvas grid\n\t            var line = null;\n\t            var canvas = null;\n\t            var pixels = null;\n\t            var context = null;\n\t\n\t            var x = null; // cols\n\t            var y = null; // rows\n\t            var sx = null; // scaled cols\n\t            var sy = null; // scaled rows\n\t            var sw = null; // scaled width\n\t            var sh = null; // scaled height\n\t\n\t            // For each line\n\t            for (y = 0; y < this.size.rows; y++) {\n\t                // Reset current line\n\t                line = [];\n\t                pixels = [];\n\t\n\t                // For each column\n\t                for (x = 0; x < this.size.cols; x++) {\n\t                    // Create canvas element\n\t                    canvas = document.createElement('canvas');\n\t\n\t                    // Set canvas size\n\t                    if (x === 0 || x < this.size.cols - 1) {\n\t                        canvas.width = this.size.width < this.cellSize ? this.size.width : this.cellSize;\n\t                    } else {\n\t                        // Get the rest for the last item (except the first one)\n\t                        canvas.width = this.size.width % this.cellSize;\n\t                    }\n\t\n\t                    if (y === 0 || y < this.size.rows - 1) {\n\t                        canvas.height = this.size.height < this.cellSize ? this.size.height : this.cellSize;\n\t                    } else {\n\t                        // Get the rest for the last item (except the first one)\n\t                        canvas.height = this.size.height % this.cellSize;\n\t                    }\n\t\n\t                    // Get canvas 2d context\n\t                    context = canvas.getContext('2d');\n\t\n\t                    // Fill withe background (avoid alpha chanel calculation)\n\t                    context.fillStyle = 'white';\n\t                    context.fillRect(0, 0, canvas.width, canvas.height);\n\t\n\t                    // Draw the part of image in the canvas (scale)\n\t                    sw = canvas.width / this.scaleRatio.x;\n\t                    sh = canvas.height / this.scaleRatio.y;\n\t                    sx = x * this.cellSize / this.scaleRatio.x;\n\t                    sy = y * this.cellSize / this.scaleRatio.y;\n\t\n\t                    context.drawImage(this.image, sx, sy, sw, sh, 0, 0, canvas.width, canvas.height);\n\t\n\t                    // Apply image filters\n\t                    (0, _lw2.default)(canvas, this.filters);\n\t\n\t                    // Add the canvas to current line\n\t                    line.push(canvas);\n\t\n\t                    // Add the canvas image data to current line\n\t                    pixels.push(context.getImageData(0, 0, canvas.width, canvas.height).data);\n\t                }\n\t\n\t                // Add the line to canvas grid\n\t                this.pixels.push(pixels);\n\t                this.canvas.push(line);\n\t            }\n\t        }\n\t    }, {\n\t        key: 'getPixel',\n\t        value: function getPixel(x, y) {\n\t            // Test coords validity\n\t            x = parseInt(x);\n\t            y = parseInt(y);\n\t\n\t            if (isNaN(x) || isNaN(y)) {\n\t                throw new Error('[x, y] params must be Integer.');\n\t            }\n\t\n\t            // Test coords range\n\t            if (x < 0 || x >= this.size.width) {\n\t                throw new Error('Out of range: x = ' + x + ', max: ' + this.size.width);\n\t            }\n\t\n\t            if (y < 0 || y >= this.size.height) {\n\t                throw new Error('Out of range: y = ' + y + ', max: ' + this.size.height);\n\t            }\n\t\n\t            // Calculate target canvas coords\n\t            var col = parseInt(x / this.cellSize);\n\t            var row = parseInt(y / this.cellSize);\n\t\n\t            // Adjuste x/y values relative to canvas origin\n\t            col && (x -= this.cellSize * col);\n\t            row && (y -= this.cellSize * row);\n\t\n\t            // Get pixel data\n\t            var cellSize = this.cellSize;\n\t\n\t            if (this.size.width < cellSize) {\n\t                cellSize = this.size.width;\n\t            } else if (this.size.width < cellSize * (col + 1)) {\n\t                cellSize = this.size.width % cellSize;\n\t            }\n\t\n\t            var i = y * (cellSize * 4) + x * 4;\n\t            var pixels = this.pixels[row][col];\n\t            var pixelData = pixels.slice(i, i + 4);\n\t\n\t            return {\n\t                color: { r: pixelData[0], g: pixelData[1], b: pixelData[2], a: pixelData[3] },\n\t                gray: (pixelData[0] + pixelData[1] + pixelData[2]) / 3,\n\t                grid: { col: col, row: row },\n\t                coords: { x: x, y: y }\n\t            };\n\t        }\n\t    }]);\n\t\n\t    return CanvasGrid;\n\t}();\n\t\n\t// Exports\n\t\n\t\n\texports.CanvasGrid = CanvasGrid;\n\texports.default = CanvasGrid;\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t(function webpackUniversalModuleDefinition(root, factory) {\n\t\tif(true)\n\t\t\tmodule.exports = factory();\n\t\telse if(typeof define === 'function' && define.amd)\n\t\t\tdefine(\"CanvasFilter\", [], factory);\n\t\telse if(typeof exports === 'object')\n\t\t\texports[\"CanvasFilter\"] = factory();\n\t\telse\n\t\t\troot[\"CanvasFilter\"] = factory();\n\t})(this, function() {\n\treturn /******/ (function(modules) { // webpackBootstrap\n\t/******/ \t// The module cache\n\t/******/ \tvar installedModules = {};\n\t/******/\n\t/******/ \t// The require function\n\t/******/ \tfunction __webpack_require__(moduleId) {\n\t/******/\n\t/******/ \t\t// Check if module is in cache\n\t/******/ \t\tif(installedModules[moduleId])\n\t/******/ \t\t\treturn installedModules[moduleId].exports;\n\t/******/\n\t/******/ \t\t// Create a new module (and put it into the cache)\n\t/******/ \t\tvar module = installedModules[moduleId] = {\n\t/******/ \t\t\texports: {},\n\t/******/ \t\t\tid: moduleId,\n\t/******/ \t\t\tloaded: false\n\t/******/ \t\t};\n\t/******/\n\t/******/ \t\t// Execute the module function\n\t/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\t/******/\n\t/******/ \t\t// Flag the module as loaded\n\t/******/ \t\tmodule.loaded = true;\n\t/******/\n\t/******/ \t\t// Return the exports of the module\n\t/******/ \t\treturn module.exports;\n\t/******/ \t}\n\t/******/\n\t/******/\n\t/******/ \t// expose the modules object (__webpack_modules__)\n\t/******/ \t__webpack_require__.m = modules;\n\t/******/\n\t/******/ \t// expose the module cache\n\t/******/ \t__webpack_require__.c = installedModules;\n\t/******/\n\t/******/ \t// __webpack_public_path__\n\t/******/ \t__webpack_require__.p = \"\";\n\t/******/\n\t/******/ \t// Load entry module and return exports\n\t/******/ \treturn __webpack_require__(0);\n\t/******/ })\n\t/************************************************************************/\n\t/******/ ([\n\t/* 0 */\n\t/***/ function(module, exports, __webpack_require__) {\n\t\n\t\tmodule.exports = __webpack_require__(1);\n\t\n\t\n\t/***/ },\n\t/* 1 */\n\t/***/ function(module, exports) {\n\t\n\t\t'use strict';\n\t\t\n\t\tObject.defineProperty(exports, \"__esModule\", {\n\t\t    value: true\n\t\t});\n\t\t// Grayscale algorithms\n\t\tvar grayscaleAlgorithms = ['none', 'average', 'desaturation', 'decomposition-min', 'decomposition-max', 'luma', 'luma-601', 'luma-709', 'luma-240', 'red-chanel', 'green-chanel', 'blue-chanel'];\n\t\t\n\t\t// Trucate color value in the 0-255 range\n\t\tfunction color(color) {\n\t\t    return color < 0 ? 0 : color > 255 ? 255 : color;\n\t\t}\n\t\t\n\t\t// Filters ...\n\t\tfunction invertColor(data, i, value) {\n\t\t    if (value) {\n\t\t        data[i] = color(255 - data[i]);\n\t\t        data[i + 1] = color(255 - data[i + 1]);\n\t\t        data[i + 2] = color(255 - data[i + 2]);\n\t\t    }\n\t\t}\n\t\t\n\t\tfunction brightness(data, i, value) {\n\t\t    if (value !== undefined) {\n\t\t        data[i] = color(data[i] + value);\n\t\t        data[i + 1] = color(data[i + 1] + value);\n\t\t        data[i + 2] = color(data[i + 2] + value);\n\t\t    }\n\t\t}\n\t\t\n\t\tfunction contrast(data, i, value) {\n\t\t    if (value !== undefined) {\n\t\t        data[i] = color(value * (data[i] - 128) + 128);\n\t\t        data[i + 1] = color(value * (data[i + 1] - 128) + 128);\n\t\t        data[i + 2] = color(value * (data[i + 2] - 128) + 128);\n\t\t    }\n\t\t}\n\t\t\n\t\tfunction gamma(data, i, value) {\n\t\t    if (value !== undefined) {\n\t\t        data[i] = color(Math.exp(Math.log(255 * (data[i] / 255)) * value));\n\t\t        data[i + 1] = color(Math.exp(Math.log(255 * (data[i + 1] / 255)) * value));\n\t\t        data[i + 2] = color(Math.exp(Math.log(255 * (data[i + 2] / 255)) * value));\n\t\t    }\n\t\t}\n\t\t\n\t\tfunction grayscale(data, i, algorithm, shades) {\n\t\t    // Graysale\n\t\t    // http://www.tannerhelland.com/3643/grayscale-image-algorithm-vb6/\n\t\t\n\t\t    // Unsupported algorithm\n\t\t    if (grayscaleAlgorithms.indexOf(algorithm) === -1) {\n\t\t        throw new Error('Unsupported grayscale algorithm: ' + algorithm);\n\t\t    }\n\t\t\n\t\t    // None\n\t\t    if (algorithm === 'none') {\n\t\t        return null;\n\t\t    }\n\t\t\n\t\t    // Get Red/Green/Blue values\n\t\t    var gray = void 0;\n\t\t    var r = data[i];\n\t\t    var g = data[i + 1];\n\t\t    var b = data[i + 2];\n\t\t\n\t\t    switch (algorithm) {\n\t\t        case 'average':\n\t\t            gray = (r + g + b) / 3;\n\t\t            break;\n\t\t\n\t\t        case 'luma':\n\t\t            // Default\n\t\t            gray = r * 0.3 + g * 0.59 + b * 0.11;\n\t\t            break;\n\t\t\n\t\t        case 'luma-601':\n\t\t            // CCIR-601\n\t\t            gray = r * 0.299 + g * 0.587 + b * 0.114;\n\t\t            break;\n\t\t\n\t\t        case 'luma-709':\n\t\t            // ITU-R-709\n\t\t            gray = r * 0.2126 + g * 0.7152 + b * 0.0722;\n\t\t            break;\n\t\t\n\t\t        case 'luma-240':\n\t\t            // SMPTE-240M\n\t\t            gray = r * 0.212 + g * 0.701 + b * 0.087;\n\t\t            break;\n\t\t\n\t\t        case 'desaturation':\n\t\t            gray = (Math.max(r, g, b) + Math.min(r, g, b)) / 2;\n\t\t            break;\n\t\t\n\t\t        case 'decomposition-min':\n\t\t            gray = Math.min(r, g, b);\n\t\t            break;\n\t\t\n\t\t        case 'decomposition-max':\n\t\t            gray = Math.max(r, g, b);\n\t\t            break;\n\t\t\n\t\t        case 'red-chanel':\n\t\t            gray = r;\n\t\t            break;\n\t\t\n\t\t        case 'green-chanel':\n\t\t            gray = g;\n\t\t            break;\n\t\t\n\t\t        case 'blue-chanel':\n\t\t            gray = b;\n\t\t            break;\n\t\t    }\n\t\t\n\t\t    // Shades of gray\n\t\t    if (shades !== undefined) {\n\t\t        gray = parseInt(gray / shades) * shades;\n\t\t    }\n\t\t\n\t\t    // Force integer\n\t\t    gray = parseInt(gray);\n\t\t\n\t\t    // Set new r/g/b values\n\t\t    data[i] = color(gray);\n\t\t    data[i + 1] = color(gray);\n\t\t    data[i + 2] = color(gray);\n\t\t}\n\t\t\n\t\t// Apply filters on provided canvas\n\t\tfunction canvasFilters(canvas, settings) {\n\t\t    settings = Object.assign({}, {\n\t\t        smoothing: false, // Smoothing [true|fale]\n\t\t        brightness: 0, // Image brightness [-255 to +255]\n\t\t        contrast: 0, // Image contrast [-255 to +255]\n\t\t        gamma: 0, // Image gamma correction [0.01 to 7.99]\n\t\t        grayscale: 'none', // Graysale algorithm [average, luma, luma-601, luma-709, luma-240, desaturation, decomposition-[min|max], [red|green|blue]-chanel]\n\t\t        shadesOfGray: 256, // Number of shades of gray [2-256]\n\t\t        invertColor: false // Invert color...\n\t\t    }, settings || {});\n\t\t\n\t\t    // Get canvas 2d context\n\t\t    var context = canvas.getContext('2d');\n\t\t\n\t\t    // Smoothing\n\t\t    if (context.imageSmoothingEnabled !== undefined) {\n\t\t        context.imageSmoothingEnabled = settings.smoothing;\n\t\t    } else {\n\t\t        context.mozImageSmoothingEnabled = settings.smoothing;\n\t\t        context.webkitImageSmoothingEnabled = settings.smoothing;\n\t\t        context.msImageSmoothingEnabled = settings.smoothing;\n\t\t        context.oImageSmoothingEnabled = settings.smoothing;\n\t\t    }\n\t\t\n\t\t    // Get image data\n\t\t    var imageData = context.getImageData(0, 0, canvas.width, canvas.height);\n\t\t    var data = imageData.data;\n\t\t\n\t\t    var contrastFactor = void 0,\n\t\t        brightnessOffset = void 0,\n\t\t        gammaCorrection = void 0,\n\t\t        shadesOfGrayFactor = void 0;\n\t\t\n\t\t    if (settings.contrast !== 0) {\n\t\t        contrastFactor = 259 * (settings.contrast + 255) / (255 * (259 - settings.contrast));\n\t\t    }\n\t\t\n\t\t    if (settings.brightness !== 0) {\n\t\t        brightnessOffset = settings.brightness;\n\t\t    }\n\t\t\n\t\t    if (settings.gamma !== 0) {\n\t\t        gammaCorrection = 1 / settings.gamma;\n\t\t    }\n\t\t\n\t\t    // Shades of gray\n\t\t    if (settings.shadesOfGray > 1 && settings.shadesOfGray < 256) {\n\t\t        shadesOfGrayFactor = 255 / (settings.shadesOfGray - 1);\n\t\t    }\n\t\t\n\t\t    // For each pixel\n\t\t    for (var i = 0, il = data.length; i < il; i += 4) {\n\t\t        // Apply filters\n\t\t        invertColor(data, i, settings.invertColor);\n\t\t        brightness(data, i, brightnessOffset);\n\t\t        contrast(data, i, contrastFactor);\n\t\t        gamma(data, i, gammaCorrection);\n\t\t        grayscale(data, i, settings.grayscale, shadesOfGrayFactor);\n\t\t    }\n\t\t\n\t\t    // Write new image data on the context\n\t\t    context.putImageData(imageData, 0, 0);\n\t\t}\n\t\t\n\t\t// Exports\n\t\texports.canvasFilters = canvasFilters;\n\t\texports.default = canvasFilters;\n\t\n\t/***/ }\n\t/******/ ])\n\t});\n\t;\n\t//# sourceMappingURL=lw.canvas-filters.js.map\n\n/***/ }\n/******/ ])\n});\n;\n\n\n// WEBPACK FOOTER //\n// lw.canvas-grid.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap b3c3e5e57e129fff80c4","import canvasFilters from 'lw.canvas-filters'\n\n// CanvasGrid class\nclass CanvasGrid {\n    // Class constructor...\n    constructor(settings) {\n        // Init properties\n        this.cellSize   = 1024\n        this.scaleRatio = { x: 1, y: 1 }\n        this.filters    = {}\n\n        Object.assign(this, settings || {})\n\n        if (! this.scaleRatio.x) {\n            this.scaleRatio = { x: this.scaleRatio, y: this.scaleRatio }\n        }\n\n        this.size   = { width: 0, height: 0, cols: 0, rows: 0 }\n        this.file   = null\n        this.image  = null\n        this.url    = null\n        this.canvas = []\n        this.pixels = []\n    }\n\n    // <input> can be Image, File, URL object or URL string (http://* or data:image/*)\n    load(input) {\n        // Load File object\n        if (input instanceof File) {\n            return this.loadFromFile(input)\n        }\n\n        // Load Image object\n        if (input instanceof Image) {\n            return this.loadFromImage(input)\n        }\n\n        // Load URL object\n        if (typeof input === 'string' || input instanceof URL) {\n            return this.loadFromURL(input.trim())\n        }\n\n        // Return rejected promise with an Error object\n        return Promise.reject(new Error('Unsupported input format.'))\n    }\n\n    // Load image\n    _loadImage(src, reject, resolve) {\n        // Create Image object\n        let image = new Image()\n\n        // Register for load and error events\n        image.onload = event => {\n            this.loadFromImage(image).then(resolve).catch(reject)\n        }\n\n        image.onerror = event => {\n            reject(new Error('An error occurred while loading the image : ' + src))\n        }\n\n        // Load the image from File url\n        image.src = src\n    }\n\n    // Load from File object\n    loadFromFile(input) {\n        return new Promise((resolve, reject) => {\n            // Bad input type\n            if (! (input instanceof File)) {\n                reject(new Error('Input param must be a File object.'))\n            }\n\n            // Set input file\n            this.file = input\n\n            // Load image\n            this._loadImage(URL.createObjectURL(input), reject, resolve)\n        })\n    }\n\n    // Load from URL object or string\n    loadFromURL(input) {\n        return new Promise((resolve, reject) => {\n            // Bad input type\n            if (! (input instanceof URL) && typeof input !== 'string') {\n                reject(new Error('Input param must be a URL string or object.'))\n            }\n\n            // Create url object\n            let url = input instanceof URL ? input : new URL(input)\n\n            // Set url\n            this.url = url\n\n            // Load image\n            this._loadImage(url, reject, resolve)\n        })\n    }\n\n    // Load from Image object\n    loadFromImage(input) {\n        return new Promise((resolve, reject) => {\n            // Bad input type\n            if (! (input instanceof Image)) {\n                reject(new Error('Input param must be a Image object.'))\n            }\n\n            // Set input image\n            this.image = input\n\n            // Process image\n            this._processImage()\n\n            // Resolve the promise\n            resolve(this)\n        })\n    }\n\n    _processImage() {\n        // Reset canvas grid\n        this.canvas = []\n        this.pixels = []\n\n        // Calculate grid size\n        let width  = Math.round(this.image.width * this.scaleRatio.x)\n        let height = Math.round(this.image.height * this.scaleRatio.y)\n        let cols   = Math.ceil(width / this.cellSize)\n        let rows   = Math.ceil(height / this.cellSize)\n\n        this.size = { width, height, cols, rows }\n\n        // Create canvas grid\n        let line    = null\n        let canvas  = null\n        let pixels  = null\n        let context = null\n\n        let x  = null // cols\n        let y  = null // rows\n        let sx = null // scaled cols\n        let sy = null // scaled rows\n        let sw = null // scaled width\n        let sh = null // scaled height\n\n        // For each line\n        for (y = 0; y < this.size.rows; y++) {\n            // Reset current line\n            line   = []\n            pixels = []\n\n            // For each column\n            for (x = 0; x < this.size.cols; x++) {\n                // Create canvas element\n                canvas = document.createElement('canvas')\n\n                // Set canvas size\n                if (x === 0 || x < (this.size.cols - 1)) {\n                    canvas.width = this.size.width < this.cellSize\n                                 ? this.size.width : this.cellSize\n                }\n                else {\n                    // Get the rest for the last item (except the first one)\n                    canvas.width = this.size.width % this.cellSize\n                }\n\n                if (y === 0 || y < (this.size.rows - 1)) {\n                    canvas.height = this.size.height < this.cellSize\n                                  ? this.size.height : this.cellSize\n                }\n                else {\n                    // Get the rest for the last item (except the first one)\n                    canvas.height = this.size.height % this.cellSize\n                }\n\n                // Get canvas 2d context\n                context = canvas.getContext('2d')\n\n                // Fill withe background (avoid alpha chanel calculation)\n                context.fillStyle = 'white'\n                context.fillRect(0, 0, canvas.width, canvas.height)\n\n                // Draw the part of image in the canvas (scale)\n                sw = canvas.width / this.scaleRatio.x\n                sh = canvas.height / this.scaleRatio.y\n                sx = x * this.cellSize / this.scaleRatio.x\n                sy = y * this.cellSize / this.scaleRatio.y\n\n                context.drawImage(\n                    this.image, sx, sy, sw, sh,\n                    0, 0, canvas.width, canvas.height\n                )\n\n                // Apply image filters\n                canvasFilters(canvas, this.filters)\n\n                // Add the canvas to current line\n                line.push(canvas)\n\n                // Add the canvas image data to current line\n                pixels.push(context.getImageData(0, 0, canvas.width, canvas.height).data)\n            }\n\n            // Add the line to canvas grid\n            this.pixels.push(pixels)\n            this.canvas.push(line)\n        }\n    }\n\n    getPixel(x, y) {\n        // Test coords validity\n        x = parseInt(x)\n        y = parseInt(y)\n\n        if (isNaN(x) || isNaN(y)) {\n            throw new Error('[x, y] params must be Integer.')\n        }\n\n        // Test coords range\n        if (x < 0 || x >= this.size.width) {\n            throw new Error('Out of range: x = ' + x + ', max: ' + this.size.width)\n        }\n\n        if (y < 0 || y >= this.size.height) {\n            throw new Error('Out of range: y = ' + y + ', max: ' + this.size.height)\n        }\n\n        // Calculate target canvas coords\n        let col = parseInt(x / this.cellSize)\n        let row = parseInt(y / this.cellSize)\n\n        // Adjuste x/y values relative to canvas origin\n        col && (x -= this.cellSize * col)\n        row && (y -= this.cellSize * row)\n\n        // Get pixel data\n        let cellSize  = this.cellSize;\n\n        if (this.size.width < cellSize) {\n            cellSize = this.size.width\n        }\n        else if (this.size.width < cellSize * (col + 1)) {\n            cellSize = this.size.width % cellSize\n        }\n\n        let i         = (y * (cellSize * 4)) + (x * 4)\n        let pixels    = this.pixels[row][col]\n        let pixelData = pixels.slice(i, i + 4)\n\n        return {\n            color : { r: pixelData[0], g: pixelData[1], b: pixelData[2], a: pixelData[3] },\n            gray  : (pixelData[0] + pixelData[1] + pixelData[2]) / 3,\n            grid  : { col, row },\n            coords: { x, y }\n        }\n    }\n}\n\n// Exports\nexport { CanvasGrid }\nexport default CanvasGrid\n\n\n\n// WEBPACK FOOTER //\n// ./canvas-grid.js","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"CanvasFilter\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"CanvasFilter\"] = factory();\n\telse\n\t\troot[\"CanvasFilter\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1);\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t// Grayscale algorithms\n\tvar grayscaleAlgorithms = ['none', 'average', 'desaturation', 'decomposition-min', 'decomposition-max', 'luma', 'luma-601', 'luma-709', 'luma-240', 'red-chanel', 'green-chanel', 'blue-chanel'];\n\t\n\t// Trucate color value in the 0-255 range\n\tfunction color(color) {\n\t    return color < 0 ? 0 : color > 255 ? 255 : color;\n\t}\n\t\n\t// Filters ...\n\tfunction invertColor(data, i, value) {\n\t    if (value) {\n\t        data[i] = color(255 - data[i]);\n\t        data[i + 1] = color(255 - data[i + 1]);\n\t        data[i + 2] = color(255 - data[i + 2]);\n\t    }\n\t}\n\t\n\tfunction brightness(data, i, value) {\n\t    if (value !== undefined) {\n\t        data[i] = color(data[i] + value);\n\t        data[i + 1] = color(data[i + 1] + value);\n\t        data[i + 2] = color(data[i + 2] + value);\n\t    }\n\t}\n\t\n\tfunction contrast(data, i, value) {\n\t    if (value !== undefined) {\n\t        data[i] = color(value * (data[i] - 128) + 128);\n\t        data[i + 1] = color(value * (data[i + 1] - 128) + 128);\n\t        data[i + 2] = color(value * (data[i + 2] - 128) + 128);\n\t    }\n\t}\n\t\n\tfunction gamma(data, i, value) {\n\t    if (value !== undefined) {\n\t        data[i] = color(Math.exp(Math.log(255 * (data[i] / 255)) * value));\n\t        data[i + 1] = color(Math.exp(Math.log(255 * (data[i + 1] / 255)) * value));\n\t        data[i + 2] = color(Math.exp(Math.log(255 * (data[i + 2] / 255)) * value));\n\t    }\n\t}\n\t\n\tfunction grayscale(data, i, algorithm, shades) {\n\t    // Graysale\n\t    // http://www.tannerhelland.com/3643/grayscale-image-algorithm-vb6/\n\t\n\t    // Unsupported algorithm\n\t    if (grayscaleAlgorithms.indexOf(algorithm) === -1) {\n\t        throw new Error('Unsupported grayscale algorithm: ' + algorithm);\n\t    }\n\t\n\t    // None\n\t    if (algorithm === 'none') {\n\t        return null;\n\t    }\n\t\n\t    // Get Red/Green/Blue values\n\t    var gray = void 0;\n\t    var r = data[i];\n\t    var g = data[i + 1];\n\t    var b = data[i + 2];\n\t\n\t    switch (algorithm) {\n\t        case 'average':\n\t            gray = (r + g + b) / 3;\n\t            break;\n\t\n\t        case 'luma':\n\t            // Default\n\t            gray = r * 0.3 + g * 0.59 + b * 0.11;\n\t            break;\n\t\n\t        case 'luma-601':\n\t            // CCIR-601\n\t            gray = r * 0.299 + g * 0.587 + b * 0.114;\n\t            break;\n\t\n\t        case 'luma-709':\n\t            // ITU-R-709\n\t            gray = r * 0.2126 + g * 0.7152 + b * 0.0722;\n\t            break;\n\t\n\t        case 'luma-240':\n\t            // SMPTE-240M\n\t            gray = r * 0.212 + g * 0.701 + b * 0.087;\n\t            break;\n\t\n\t        case 'desaturation':\n\t            gray = (Math.max(r, g, b) + Math.min(r, g, b)) / 2;\n\t            break;\n\t\n\t        case 'decomposition-min':\n\t            gray = Math.min(r, g, b);\n\t            break;\n\t\n\t        case 'decomposition-max':\n\t            gray = Math.max(r, g, b);\n\t            break;\n\t\n\t        case 'red-chanel':\n\t            gray = r;\n\t            break;\n\t\n\t        case 'green-chanel':\n\t            gray = g;\n\t            break;\n\t\n\t        case 'blue-chanel':\n\t            gray = b;\n\t            break;\n\t    }\n\t\n\t    // Shades of gray\n\t    if (shades !== undefined) {\n\t        gray = parseInt(gray / shades) * shades;\n\t    }\n\t\n\t    // Force integer\n\t    gray = parseInt(gray);\n\t\n\t    // Set new r/g/b values\n\t    data[i] = color(gray);\n\t    data[i + 1] = color(gray);\n\t    data[i + 2] = color(gray);\n\t}\n\t\n\t// Apply filters on provided canvas\n\tfunction canvasFilters(canvas, settings) {\n\t    settings = Object.assign({}, {\n\t        smoothing: false, // Smoothing [true|fale]\n\t        brightness: 0, // Image brightness [-255 to +255]\n\t        contrast: 0, // Image contrast [-255 to +255]\n\t        gamma: 0, // Image gamma correction [0.01 to 7.99]\n\t        grayscale: 'none', // Graysale algorithm [average, luma, luma-601, luma-709, luma-240, desaturation, decomposition-[min|max], [red|green|blue]-chanel]\n\t        shadesOfGray: 256, // Number of shades of gray [2-256]\n\t        invertColor: false // Invert color...\n\t    }, settings || {});\n\t\n\t    // Get canvas 2d context\n\t    var context = canvas.getContext('2d');\n\t\n\t    // Smoothing\n\t    if (context.imageSmoothingEnabled !== undefined) {\n\t        context.imageSmoothingEnabled = settings.smoothing;\n\t    } else {\n\t        context.mozImageSmoothingEnabled = settings.smoothing;\n\t        context.webkitImageSmoothingEnabled = settings.smoothing;\n\t        context.msImageSmoothingEnabled = settings.smoothing;\n\t        context.oImageSmoothingEnabled = settings.smoothing;\n\t    }\n\t\n\t    // Get image data\n\t    var imageData = context.getImageData(0, 0, canvas.width, canvas.height);\n\t    var data = imageData.data;\n\t\n\t    var contrastFactor = void 0,\n\t        brightnessOffset = void 0,\n\t        gammaCorrection = void 0,\n\t        shadesOfGrayFactor = void 0;\n\t\n\t    if (settings.contrast !== 0) {\n\t        contrastFactor = 259 * (settings.contrast + 255) / (255 * (259 - settings.contrast));\n\t    }\n\t\n\t    if (settings.brightness !== 0) {\n\t        brightnessOffset = settings.brightness;\n\t    }\n\t\n\t    if (settings.gamma !== 0) {\n\t        gammaCorrection = 1 / settings.gamma;\n\t    }\n\t\n\t    // Shades of gray\n\t    if (settings.shadesOfGray > 1 && settings.shadesOfGray < 256) {\n\t        shadesOfGrayFactor = 255 / (settings.shadesOfGray - 1);\n\t    }\n\t\n\t    // For each pixel\n\t    for (var i = 0, il = data.length; i < il; i += 4) {\n\t        // Apply filters\n\t        invertColor(data, i, settings.invertColor);\n\t        brightness(data, i, brightnessOffset);\n\t        contrast(data, i, contrastFactor);\n\t        gamma(data, i, gammaCorrection);\n\t        grayscale(data, i, settings.grayscale, shadesOfGrayFactor);\n\t    }\n\t\n\t    // Write new image data on the context\n\t    context.putImageData(imageData, 0, 0);\n\t}\n\t\n\t// Exports\n\texports.canvasFilters = canvasFilters;\n\texports.default = canvasFilters;\n\n/***/ }\n/******/ ])\n});\n;\n//# sourceMappingURL=lw.canvas-filters.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/lw.canvas-filters/dist/lw.canvas-filters.js\n// module id = 2\n// module chunks = 0"],"sourceRoot":""}